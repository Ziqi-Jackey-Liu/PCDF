import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
import numpy as np


def t_sne(data):
    tsne = TSNE(n_components=2, perplexity=30, random_state=42)
    data_2d = tsne.fit_transform(data)

    # draw scatter plot
    plt.figure(figsize=(8, 6))
    plt.scatter(data_2d[:, 0], data_2d[:, 1], alpha=0.7, cmap='viridis')

    plt.xlim(0, 5)
    plt.ylim(0, 5)

    # add title and axis labels
    plt.title("t-SNE Dimensionality Reduction", fontsize=14)
    plt.xlabel("t-SNE Component 1")
    plt.ylabel("t-SNE Component 2")

    plt.show()
    return 1


def scatter():
    # your data (structure is [dataset][step][method])
    # datasets = {
    #     'NYC taxi': [
    #         [0.000459, 0.000397, 0.000340, 0.000716, 0.000310, 0.002464],
    #         [0.000524, 0.000567, 0.000386, 0.001026, 0.000348, 0.003966],
    #         [0.000581, 0.000735, 0.000478, 0.001853, 0.000968, 0.006231],
    #         [0.000664, 0.000885, 0.000564, 0.002532, 0.000528, 0.007694],
    #         [0.000761, 0.000969, 0.000745, 0.003158, 0.000632, 0.012362]
    #     ],
    #     'DC bike': [
    #         [0.000539, 0.000647, 0.000413, 0.001063, 0.000505, 0.009265],
    #         [0.000619, 0.000864, 0.000414, 0.001693, 0.000366, 0.016486],
    #         [0.000691, 0.001150, 0.000643, 0.003208, 0.000543, 0.028265],
    #         [0.000804, 0.001345, 0.000949, 0.003812, 0.000622, 0.037110],
    #         [0.000984, 0.001500, 0.001235, 0.005163, 0.003392, 0.050074]
    #     ],
    #     'Electricity': [
    #         [0.000299, 0.000215, 0.000219, 0.000337, 0.000169, 0.001188],
    #         [0.000242, 0.000285, 0.000234, 0.000611, 0.000195, 0.001984],
    #         [0.000394, 0.000448, 0.000319, 0.000972, 0.000335, 0.004585],
    #         [0.000430, 0.000523, 0.000404, 0.001315, 0.000312, 0.007746],
    #         [0.000525, 0.000697, 0.000534, 0.001740, 0.000425, 0.013574]
    #     ],
    #     'Solar energy': [
    #         [0.000765, 0.000980, 0.000538, 0.001336, 0.000508, 0.007004],
    #         [0.000586, 0.000915, 0.000506, 0.001576, 0.000416, 0.007520],
    #         [0.000631, 0.001087, 0.000541, 0.002316, 0.000512, 0.015104],
    #         [0.000730, 0.001384, 0.000625, 0.003065, 0.000596, 0.026226],
    #         [0.000857, 0.001401, 0.000750, 0.003609, 0.000869, 0.039396]
    #     ],
    #     'Sensor drift': [
    #         [0.000548, 0.001070, 0.000434, 0.001573, 0.000368, 0.010083],
    #         [0.000638, 0.001385, 0.000456, 0.002456, 0.000472, 0.013823],
    #         [0.000846, 0.002084, 0.000666, 0.004751, 0.000792, 0.024024],
    #         [0.000951, 0.002270, 0.000841, 0.006407, 0.000861, 0.031081],
    #         [0.001077, 0.002886, 0.000929, 0.009078, 0.000850, 0.033141]
    #     ],
    #     'weather': [
    #         [0.000342, 0.000434, 0.000273, 0.000989, 0.000425, 0.001812],
    #         [0.000394, 0.000547, 0.000306, 0.001193, 0.000267, 0.003822],
    #         [0.000569, 0.000731, 0.000382, 0.002106, 0.000391, 0.007379],
    #         [0.000590, 0.000883, 0.000535, 0.003086, 0.000475, 0.011419],
    #         [0.000630, 0.001081, 0.000528, 0.004326, 0.000533, 0.022849]
    #     ]
    # }
    #MSE
    # datasets = {
    #     'NYC taxi': [
    #         [0.17001, 0.11583, 0.17185, 0.18207, 0.17617, 0.21746],
    #         [0.17345, 0.10712, 0.17866, 0.16052, 0.18100, 0.19901],
    #         [0.16690, 0.10621, 0.17004, 0.17685, 0.38246, 0.20868],
    #         [0.16273, 0.10325, 0.16454, 0.16722, 0.16447, 0.20644],
    #         [0.16375, 0.10497, 0.18567, 0.15947, 0.16808, 0.21135]
    #     ],
    #     'DC bike': [
    #         [0.20727, 0.19984, 0.21993, 0.24833, 0.30601, 0.84002],
    #         [0.20484, 0.18705, 0.19908, 0.26378, 0.19993, 0.82432],
    #         [0.20499, 0.18827, 0.23476, 0.29622, 0.20643, 1.01525],
    #         [0.19953, 0.17986, 0.27986, 0.25127, 0.19940, 0.99303],
    #         [0.20115, 0.18116, 0.26227, 0.25409, 0.81534, 1.01694]
    #     ],
    #     'Electricity': [
    #         [0.12057, 0.05089, 0.11797, 0.07222, 0.10462, 0.08058],
    #         [0.08506, 0.05172, 0.10813, 0.08733, 0.10000, 0.07827],
    #         [0.10636, 0.06189, 0.10774, 0.08091, 0.10971, 0.12867],
    #         [0.10527, 0.05711, 0.11765, 0.07376, 0.09699, 0.16501],
    #         [0.10686, 0.06797, 0.12568, 0.07290, 0.10561, 0.16060]
    #     ],
    #     'Solar energy': [
    #         [0.28963, 0.34265, 0.27720, 0.37834, 0.29853, 0.78084],
    #         [0.19477, 0.22869, 0.22016, 0.30252, 0.20110, 0.52998],
    #         [0.18351, 0.21239, 0.19106, 0.28950, 0.20172, 0.71582],
    #         [0.18445, 0.20562, 0.18724, 0.27392, 0.19172, 0.92214],
    #         [0.18703, 0.19491, 0.18851, 0.25131, 0.22520, 1.09463]
    #     ],
    #     'Sensor drift': [
    #         [0.21170, 0.23470, 0.23216, 0.29965, 0.22586, 0.60090],
    #         [0.21635, 0.23546, 0.21592, 0.30743, 0.24843, 0.54017],
    #         [0.22143, 0.25440, 0.24296, 0.32431, 0.29123, 0.53079],
    #         [0.21964, 0.24865, 0.23310, 0.30008, 0.25249, 0.53616],
    #         [0.21537, 0.25885, 0.23342, 0.32976, 0.22679, 0.53791]
    #     ],
    #     'weather': [
    #         [0.13686, 0.11550, 0.14842, 0.20510, 0.26743, 0.14801],
    #         [0.13915, 0.11092, 0.14120, 0.16099, 0.13915, 0.17340],
    #         [0.14017, 0.11679, 0.13612, 0.16739, 0.15410, 0.21575],
    #         [0.13686, 0.11303, 0.14488, 0.16433, 0.14433, 0.26048],
    #         [0.13583, 0.11571, 0.13162, 0.17373, 0.13908, 0.29841]
    #     ]
    # }
    #time
    datasets = {
        'NYC taxi': [
            [0.00270, 0.00343, 0.00198, 0.00393, 0.00176, 0.01133],
            [0.00302, 0.00529, 0.00216, 0.00639, 0.00192, 0.01993],
            [0.00348, 0.00692, 0.00281, 0.01048, 0.00253, 0.02986],
            [0.00408, 0.00857, 0.00343, 0.01514, 0.00321, 0.03727],
            [0.00465, 0.00923, 0.00401, 0.01980, 0.00376, 0.05849]
        ],
        'DC bike': [
            [0.00260, 0.00324, 0.00188, 0.00428, 0.00165, 0.01103],
            [0.00302, 0.00462, 0.00208, 0.00642, 0.00183, 0.02000],
            [0.00337, 0.00611, 0.00274, 0.01083, 0.00263, 0.02784],
            [0.00403, 0.00748, 0.00339, 0.01517, 0.00312, 0.03737],
            [0.00489, 0.00828, 0.00471, 0.02032, 0.00416, 0.04924]
        ],
        'Electricity': [
            [0.00248, 0.00423, 0.00186, 0.00466, 0.00162, 0.01474],
            [0.00285, 0.00551, 0.00216, 0.00700, 0.00195, 0.02535],
            [0.00370, 0.00724, 0.00296, 0.01201, 0.00305, 0.03563],
            [0.00408, 0.00915, 0.00343, 0.01783, 0.00322, 0.04694],
            [0.00491, 0.01026, 0.00425, 0.02387, 0.00402, 0.08452]
        ],
        'Solar energy': [
            [0.00264, 0.00286, 0.00194, 0.00353, 0.00170, 0.00897],
            [0.00301, 0.00400, 0.00230, 0.00521, 0.00207, 0.01419],
            [0.00344, 0.00512, 0.00283, 0.00800, 0.00254, 0.02110],
            [0.00396, 0.00673, 0.00334, 0.01119, 0.00311, 0.02844],
            [0.00458, 0.00719, 0.00398, 0.01436, 0.00386, 0.03599]
        ],
        'Sensor drift': [
            [0.00259, 0.00456, 0.00187, 0.00525, 0.00163, 0.01678],
            [0.00295, 0.00588, 0.00211, 0.00799, 0.00190, 0.02559],
            [0.00382, 0.00819, 0.00274, 0.01465, 0.00272, 0.04526],
            [0.00433, 0.00913, 0.00361, 0.02135, 0.00341, 0.05797],
            [0.00500, 0.01115, 0.00398, 0.02753, 0.00375, 0.06161]
        ],
        'weather': [
            [0.00250, 0.00376, 0.00184, 0.00482, 0.00159, 0.01224],
            [0.00283, 0.00493, 0.00217, 0.00741, 0.00192, 0.02204],
            [0.00406, 0.00626, 0.00281, 0.01258, 0.00254, 0.03420],
            [0.00431, 0.00781, 0.00369, 0.01878, 0.00329, 0.04384],
            [0.00464, 0.00934, 0.00401, 0.02490, 0.00383, 0.07657]
        ]
    }

    # ========== Basic setting ==========
    methods = ['PCDF-MLP', 'TSMixer', 'PCDF-Trans', 'PatchTST', 'PCDF-Linear', 'HDMixer']
    steps = [5, 10, 20, 30, 40]
    step_positions = [0, 1, 2, 3, 4]

    # self-defined colors
    custom_colors = ['#501a0e', '#0b323f', '#a23624', '#297862', '#17789b', '#c67637']

    # ========== Preprocess data ==========
    method_step_data = {m: [[] for _ in steps] for m in methods}
    for dataset in datasets.values():
        for i, row in enumerate(dataset):
            for j, method in enumerate(methods):
                method_step_data[method][i].append(row[j])

    # grouping
    group1 = ['PCDF-MLP', 'TSMixer']
    group2 = ['PCDF-Trans', 'PatchTST']
    group3 = ['PCDF-Linear', 'HDMixer']
    group_list = [group1, group2, group3]

    # create three subplots
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(21, 4), dpi=600)
    axes = [ax1, ax2, ax3]

    width = 0.18 # box width

    # loop each group and draw
    for ax, group in zip(axes, group_list):
        offsets = np.linspace(-width * len(group) / 2, width * len(group) / 2, len(group), endpoint=False)
        custom_labels = []
        handles = []

        for m_idx, method in enumerate(group):
            color = custom_colors[methods.index(method)]
            medians = []

            for i, pos in enumerate(step_positions):
                data = method_step_data[method][i]
                # positions=[pos + offsets[m_idx]]
                ax.boxplot(
                    data,
                    positions=[pos],
                    widths=width*0.8,
                    patch_artist=True,
                    boxprops=dict(facecolor=color, alpha=0.5),
                    medianprops=dict(color='black'),
                    showfliers=False
                )
                medians.append(np.median(data))

            # save plot
            line, = ax.plot(step_positions, medians, marker='o', color=color)
            handles.append(line)

            # add value label on top of points
            for i, val in enumerate(medians):
                # x_pos = step_positions[i] + offsets[m_idx]
                x_pos = step_positions[i]
                ax.text(x_pos+0.15, val-0.12*val, f'{val:.1e}', fontsize=14, ha='left', va='bottom')

            custom_labels.append(method)  # only save method name for legend

        # subplot setting
        ax.set_yscale('log')
        ax.set_xlabel("Number of channel", fontsize=18)
        ax.set_xticks(step_positions)
        ax.set_xticklabels([str(s) for s in steps], fontsize=18)
        ax.grid(True, linestyle='--', alpha=0.5)
        ax.set_title(' + '.join(group), fontsize=18)

        # # set legend location (by group)
        # if group == ['PSO-MLP', 'TSMixer']:
        #     legend_loc = 'lower left'
        # elif group == ['PSO-Trans', 'PatchTST']:
        #     legend_loc = 'lower center'
        # else:
        #     legend_loc = 'lower right'

        # set legend display color ✅
        ax.legend(handles, custom_labels, fontsize=18, loc='upper left', frameon=True)

    # left plot, set y axis label
    ax1.set_ylabel("Runtime", fontsize=18)

    # adjust the overall layout
    plt.tight_layout(rect=(0, 0, 1, 1))
    plt.show()

    return 1
